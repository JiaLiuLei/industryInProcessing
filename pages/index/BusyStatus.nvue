<template>
	<div class="container">
		<div class="car">
			<div>
				<div class="mileage-detail">
					<text class="big-number">{{alarm.todayPatrolDistance || 0}}</text><text class="unit">Km</text>
				</div>
				<text class="text">今日累计巡逻里程</text>
			</div>
			<div class="card">
				<text class="card-text">渝·{{ plateNumber }}</text><text class="card-text tangerine">警</text>
			</div>
		</div>
		<div class="task">
			<div>
				<div class="task-detail">
					<text class="small-number">{{alarm.totalHandleAlarm || 0}}</text><text class="text">起</text>
				</div>
				<text class="text">警情处置数</text>
			</div>
			<WorkStatus :status="alarm.status"></WorkStatus>
		</div>
		<div class="task-info">
			<div class="card-box">
				<div class="user">
					<div class="user-box">
						<image class="via" src="/static/icon-via-default.png"></image>
						<text class="name">周警官</text>
					</div>
					<div class="call-box">
						<text class="call" @click="handlePhoneCall(alarm.alarmPersonPhone)">联系报警人</text>
						<image class="arrow" src="../../static/icon-arrow.png"></image>
					</div>
				</div>
				<text class="user-task-detail">{{alarm.content}}</text>
			</div>
		</div>
		<TheSlider class="slider" @success="handlePerform"></TheSlider>
	</div>
</template>

<script>
	import WorkStatus from "./WorkStatus";
	import TheSlider from "@/components/Theslider";
	import { updateTaskStatus } from "@/api/task";
	export default {
		props:{
			sourceData: Object
		},
		components: {
			WorkStatus,
			TheSlider
		},
		computed:{
			alarm() {
				let obj = Object.create(null);
				const { alarm } = this.sourceData;
				if (alarm != null && typeof alarm === "object") {
					obj = alarm;
				}
				return obj;
			},
			bindCard() {
				let arr = [];
				const { bindCard } = this.sourceData;
				if (Array.isArray(bindCard)) {
					arr = bindCard;
				}
				return arr;
			},
			plateNumber() {
				let number = 0;
				if (this.bindCard.length) {
					const { no = "" } = this.bindCard[0];
					number = no.substring(1, no.length - 1);
				}
				return number;
			}
		},
		methods:{
			handlePhoneCall(number){
				uni.makePhoneCall({
				    phoneNumber: number
				});
			},
			async handlePerform(){
				uni.showLoading({
				    title: '加载中'
				});
				const { id, status } = this.alarm;
				try{
					await updateTaskStatus({
						jqId: id,
						status: status
					});
					this.$emit("perform");
				}catch(error){
					uni.showToast({
					    title: error.message,
						icon: "none", 
					    duration: 2000
					});
				}
				uni.hideLoading();
			}
		}
	}
</script>

<style scoped>
.container{
	margin-top: 50rpx;
}
.car{
	flex-direction: row;
	align-items: flex-end;
	justify-content: space-between;
}
.mileage-detail{
	flex-direction: row;
	align-items: flex-end;
}
.big-number{
	font-size: 100rpx;
	line-height: 100rpx;
	color: #fff;
}
.unit{
	font-size: 28rpx;
	color: #6C6F7B;
}
.text{
	font-size: 24rpx;
	color: #6C6F7B;
}
.card{
	flex-direction: row;
	align-items: center;
	justify-content: center;
	width: 300rpx;
	height: 88rpx;
	border-width: 4rpx;
	border-color: #BDC1CC;
	border-style: solid;
	border-radius: 8rpx;
	background-color: #fff;
}
.card-text{
	font-size: 36rpx;
	color: #000;
}
.tangerine{
	color: #FF6854;
}

.task{
	margin-top: 40rpx;
	flex-direction: row;
	align-items: center;
	justify-content: space-between;
}
.task-detail{
	flex-direction: row;
	align-items: flex-end;
}
.small-number{
	font-size: 60rpx;
	line-height: 60rpx;
	color: #fff;
}
.task-info{
	margin-top: 36rpx;
	border-top-width: 2rpx;
	border-top-color: #3A3E4C;
	border-top-style: solid;
}
.card-box{
	padding: 20rpx;
	border-radius: 16rpx;
	background-color: #fff;
}
.user{
	flex-direction: row;
	align-items: center;
	justify-content: space-between;
}
.user-box{
	flex-direction: row;
	align-items: center;
}
.via{
	width: 64rpx;
	height: 64rpx;
	border-radius: 64rpx;
}
.name{
	margin-left: 10rpx;
	font-size: 28rpx;
	color: #424758;
}
.call-box{
	flex-direction: row;
	align-items: center;
}
.call{
	font-size: 28rpx;
	color: #424758;
}
.arrow{
	width: 44rpx;
	height: 44rpx;
}
.user-task-detail{
	margin-top: 20rpx;
	padding: 30rpx 20rpx;
	font-size: 28rpx;
	border-radius: 8rpx;
	color: #202536;
	background-color: #F2F2F2;
}
.slider{
	margin-top: 30rpx;
}
</style>
