<template>
	<div class="container">
		<map
			id="map"
			ref="map"
			class="map"
			:style="{ height, width }"
			:markers="markers"
			enable-traffic
			show-location>
		</map>
		<div class="controls" v-if="controls">
			<div class="refresh" @click="handleReresh">
				<image class="icon" src="/static/icon-refresh.png"></image>
			</div>
			<div class="location" @click="handleBackLocation">
				<image class="icon" src="/static/icon-position.png"></image>
			</div>
		</div>
	</div>
</template>

<script>
	export default {
		name: "map",
		props:{
			height: [Number || String],
			width: [Number || String],
			destination: Object,
			controls: Boolean
		},
		data() {
			return {
				longitude: 0,
				latitude: 0,
				markers: [],
				includePoints: [],
				map: null
			}
		},
		mounted() {
			this.map = uni.createMapContext("map", this);
			
			uni.getLocation({
				type: "gcj02",
				success: res => {
					const { longitude, latitude } = res;
					
					this.longitude = longitude;
					this.latitude = latitude;
					
					if (this.destination && Object.keys(this.destination).length) {
						const { longitude: tlon, latitude: tlat } = this.destination;
						
						// 警情标点
						this.setTargetMarker(tlon, tlat);
						
						const points = [
							{longitude, latitude},
							{longitude: tlon, latitude: tlat}
						];
						
						this.includePoints = points;
						
						this.map.includePoints({
							padding: [100, 80, 100, 80],
							points,
							fail:() => {
								this.map.moveToLocation({
									longitude, latitude
								});
							}
						});
					} else {
						this.map.moveToLocation({
							longitude, latitude
						});
					}
				}
			});
		},
		methods:{
			handleReresh() {
				if (this.includePoints.length) {
					this.map.includePoints({
						padding: [100, 80, 100, 80],
						points: this.includePoints
					});
				} else {
					this.map.moveToLocation({
						longitude: this.longitude,
						latitude: this.latitude
					});
				}
			},
			handleBackLocation() {
				this.map.moveToLocation({
					longitude: this.longitude,
					latitude: this.latitude
				});
			},
			setTargetMarker(longitude, latitude){
				this.markers = [
					{
						id: 1,
						latitude,
						longitude,
						iconPath: "/static/icon-position-target.png",
						width: 44,
						height: 50
					}
				]
			}
		}
	}
</script>

<style lang="scss" scoped>
.controls{
	position: absolute;
	bottom: 40rpx;
	right: 25rpx;
	
}
.refresh, .location{
	margin-bottom: 20rpx;
	padding: 13rpx;
	border-radius: 8rpx;
	background-color: #fff;
}
.icon{
	width: 48rpx;
	height: 48rpx;
}

</style>
