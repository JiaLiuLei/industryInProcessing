<template>
	<div class="container">
		<map id="map" ref="map" class="map" :polyline="polyline" :markers="markers" enable-traffic show-location @markertap="markertap" @updated="setMap">
		</map>
		<div class="controls" v-if="controls">
			<div class="refresh" @click="handleReresh">
				<image class="icon" src="/static/icon-refresh.png"></image>
			</div>
			<div class="location" @click="handleBackLocation">
				<image class="icon" src="/static/icon-position.png"></image>
			</div>
		</div>
	</div>
</template>

<script>
	export default {
		name: "map",
		props: {
			destination: Object,
			controls: Boolean,
			isPolyline: {
				type: Boolean,
				default: false
			}
		},
		data() {
			return {
				longitude: 0,
				latitude: 0,
				markers: [],
				polyline: [],
				includePoints: [],
				map: null
			}
		},
		mounted() {
			this.map = uni.createMapContext("map", this);
			
			// this.setMap();
			// setTimeout(() => {
			// 	this.setMap();
			// }, 500);
			
			//路线规划
			if (this.isPolyline) {
				setInterval(() => {
					this.polyline = [];
					this.getLocaPoly();
				},3000)
			}
		},
		methods: {
			//路线规划
			getLocaPoly(){
				uni.getLocation({
					type: "gcj02",
					success: res => {
						const {
							longitude,
							latitude
						} = res;
						const {
							longitude: tlon,
							latitude: tlat
						} = this.destination;
						const points = [{
								longitude,
								latitude
							},
							{
								longitude: tlon,
								latitude: tlat
							}
						];
						this.polyline = [{
							points,
							color: '#0055FE',
							width: 5,
							dottedLine: true
						}];
					}
				});
			},
			setMap() {
				uni.getLocation({
					type: "gcj02",
					success: res => {
						const {
							longitude,
							latitude
						} = res;

						this.longitude = longitude;
						this.latitude = latitude;

						if (this.destination && Object.keys(this.destination).length > 0) {
							const {
								longitude: tlon,
								latitude: tlat
							} = this.destination;

							// 警情标点
							this.setTargetMarker(tlon, tlat);

							const points = [{
									longitude,
									latitude
								},
								{
									longitude: tlon,
									latitude: tlat
								}
							];

							this.includePoints = points;

							this.map.includePoints({
								padding: [200, 200, 200, 200],
								points,
								fail: () => {
									this.map.moveToLocation({
										longitude: tlon,
										latitude: tlat
									});
								}
							});

							//路线规划
							if (this.isPolyline) {
								this.polyline = [{
									points,
									color: '#0055FE',
									width: 5,
									dottedLine: true
								}];
							}
						} else {
							this.map.moveToLocation({
								longitude,
								latitude
							});
							this.markers = [];
						}
					}
				})
			},
			handleReresh() {
				if (this.includePoints.length) {
					this.map.includePoints({
						padding: [200, 200, 200, 200],
						points: this.includePoints
					});
				} else {
					this.map.moveToLocation({
						longitude: this.longitude,
						latitude: this.latitude
					});
				}
			},
			handleBackLocation() {
				this.map.moveToLocation({
					longitude: this.longitude,
					latitude: this.latitude
				});
			},
			setTargetMarker(longitude, latitude) {
				this.markers = [{
					id: 1,
					latitude,
					longitude,
					iconPath: "/static/icon-position-target.png",
					width: 44,
					height: 50
				}]
			},
			markertap() {
				uni.openLocation({
					latitude: this.includePoints[1].latitude,
					longitude: this.includePoints[1].longitude,
					success: function() {
						console.log('打开内置地图app');
					}
				});
			}
		},
		watch: {
			destination() {
				this.setMap();
			}
		}
	}
</script>

<style lang="scss" scoped>
	.container {
		flex: 1;
	}

	.map {
		width: 750rpx;
		flex: 1;
	}

	.controls {
		position: absolute;
		bottom: 40rpx;
		right: 25rpx;

	}

	.refresh,
	.location {
		margin-bottom: 20rpx;
		padding: 13rpx;
		border-radius: 8rpx;
		background-color: #fff;
	}

	.icon {
		width: 48rpx;
		height: 48rpx;
	}
</style>
